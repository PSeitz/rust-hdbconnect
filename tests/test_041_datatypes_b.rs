mod test_utils;

// use chrono::NaiveDateTime;
use flexi_logger::ReconfigurationHandle;
use hdbconnect::{Connection, HdbResult, HdbValue};
use log::info;
use serde_bytes::Bytes;
// use serde_derive::Deserialize;

#[test] // cargo test --test test_041_datatypes_b -- --nocapture
pub fn test_041_datatypes_b() -> HdbResult<()> {
    let mut log_handle = test_utils::init_logger();
    let mut connection = test_utils::get_authenticated_connection()?;

    prepare(&mut log_handle, &mut connection)?;
    write(&mut log_handle, &mut connection)?;
    read(&mut log_handle, &mut connection)?;

    info!("{} calls to DB were executed", connection.get_call_count()?);

    Ok(())
}

fn prepare(_log_handle: &mut ReconfigurationHandle, connection: &mut Connection) -> HdbResult<()> {
    // prepare the db table
    connection.multiple_statements_ignore_err(vec!["drop table TEST_TYPES_B"]);
    connection.multiple_statements(vec![
        "create table TEST_TYPES_B ( \
         id BIGINT GENERATED BY DEFAULT AS IDENTITY primary key , \
         FIELD_CLOB CLOB, \
         FIELD_NCLOB NCLOB, \
         FIELD_BLOB BLOB, \
         FIELD_BOOLEAN BOOLEAN, \
         FIELD_TEXT TEXT, \
         FIELD_SHORTTEXT SHORTTEXT(99), \
         FIELD_LONGDATE LONGDATE, \
         FIELD_SECONDDATE SECONDDATE, \
         FIELD_DAYDATE DAYDATE, \
         FIELD_SECONDTIME SECONDTIME \
         )",
    ])?;
    Ok(())
}

fn write(_log_handle: &mut ReconfigurationHandle, connection: &mut Connection) -> HdbResult<()> {
    info!("insert values directly");
    connection.dml(
        "\
         insert into TEST_TYPES_B ( \
         FIELD_CLOB, FIELD_NCLOB, FIELD_BLOB, \
         FIELD_BOOLEAN, FIELD_SHORTTEXT, FIELD_TEXT, \
         FIELD_LONGDATE, FIELD_SECONDDATE, FIELD_DAYDATE, FIELD_SECONDTIME \
         ) values( \
         'Hello world!', 'Hello world!', '0123456789abcdef', \
         false, 'Hello world!', 'Hello world!', \
         '2019-01-18 01:02:03.456789', '2019-01-18 01:02:03', '2019-01-18', '01:02:03' \
         )",
    )?;

    info!("insert values via prep-statement");
    let mut stmt = connection.prepare(
        "\
         insert into TEST_TYPES_B ( \
         FIELD_CLOB, FIELD_NCLOB, FIELD_BLOB, \
         FIELD_BOOLEAN, FIELD_SHORTTEXT, FIELD_TEXT, \
         FIELD_LONGDATE, FIELD_SECONDDATE, FIELD_DAYDATE, FIELD_SECONDTIME \
         ) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
    )?;
    stmt.execute(&(
        "Hello world!",
        "Hello world!",
        Bytes::new(&parse_hex("0123456789abcdef")),
        false,
        "Hello world!",
        "Hello world!",
        "2019-01-18 01:02:03.456789",
        "2019-01-18 01:02:03",
        "2019-01-18",
        "01:02:03",
    ))?;

    info!("insert nulls directly");
    connection.dml(
        "\
         insert into TEST_TYPES_B ( \
         FIELD_CLOB, FIELD_NCLOB, FIELD_BLOB, \
         FIELD_BOOLEAN, FIELD_SHORTTEXT, FIELD_TEXT, \
         FIELD_LONGDATE, FIELD_SECONDDATE, FIELD_DAYDATE, FIELD_SECONDTIME \
         ) values( \
         NULL, NULL, NULL, \
         NULL, NULL, NULL, \
         NULL, NULL, NULL, NULL \
         )",
    )?;

    info!("insert nulls via prep-statement");
    stmt.execute(&(
        HdbValue::N_CLOB(None),
        HdbValue::N_NCLOB(None),
        HdbValue::N_BLOB(None),
        HdbValue::N_BOOLEAN(None),
        HdbValue::N_TEXT(None),
        HdbValue::N_SHORTTEXT(None),
        HdbValue::N_LONGDATE(None),
        HdbValue::N_SECONDDATE(None),
        HdbValue::N_DAYDATE(None),
        HdbValue::N_SECONDTIME(None),
    ))?;
    Ok(())
}

fn read(_log_handle: &mut ReconfigurationHandle, _connection: &mut Connection) -> HdbResult<()> {
    Ok(())
}

fn parse_hex(hex_asm: &str) -> Vec<u8> {
    let mut hex_bytes = hex_asm
        .as_bytes()
        .iter()
        .filter_map(|b| match b {
            b'0'...b'9' => Some(b - b'0'),
            b'a'...b'f' => Some(b - b'a' + 10),
            b'A'...b'F' => Some(b - b'A' + 10),
            _ => None,
        })
        .fuse();

    let mut bytes = Vec::new();
    while let (Some(h), Some(l)) = (hex_bytes.next(), hex_bytes.next()) {
        bytes.push(h << 4 | l)
    }
    bytes
}
